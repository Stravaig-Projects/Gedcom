@using System.Globalization
@using Stravaig.Gedcom
@using Stravaig.Gedcom.Model
@using Stravaig.Gedcom.Model.Extensions

<h1>Upload a GEDCOM file to start</h1>
<InputFile OnChange="HandleFileSelectedAsync" />

@if (isLoading)
{
<div class="alert alert-info" role="alert">
  <i class="fas fa-cog fa-spin"></i>
  Loading file
  @if (file != null)
  {
    @file.Name
  }
  else
  {
    <text>...</text>
  }
</div>
}

@if (database != null)
{
  <p>Number of people: @database.IndividualRecords.Count</p>
}
@if (error)
{
  <div class="alert alert-danger" role="alert">
    <h4 class="alert-heading">Can't load the file!</h4>
    <p>The file <strong>@file.Name</strong> is not a valid GEDCOM file.</p>
    @if (exception != null)
    {
      <hr/>
      <p>@exception.Message</p>
      <environment include="Development">
        <pre>@exception</pre>
      </environment>
    }
  </div>
}

@code{

  IFileListEntry file;
  bool error = false;
  bool isLoading = false;
  Exception exception;
  GedcomDatabase database = null;

  async Task HandleFileSelectedAsync(IFileListEntry[] files)
  {
    isLoading = true;
    exception = null;
    error = false;
    file = files.FirstOrDefault();
    if (!file.Name.EndsWith(".ged", true, CultureInfo.InvariantCulture))
    {
      error = true;
    }
    if (!error)
    {
      try
      {
        GedcomSettings.LineLength = LineLengthSettings.ValueUpTo255;
        var localDatabase = new GedcomDatabase();
        await localDatabase.PopulateAsync(file.Data);
        database = localDatabase;
      }
      catch (Exception ex)
      {
        error = true;
        exception = ex;
        database = null;
      }
    }
    isLoading = false;
  }

}